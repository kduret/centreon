name: PHP Composer

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2

    #- name: Validate composer.json and composer.lock
    #  run: composer validate

    - name: Get Composer Cache Directory
      id: get-composer-cache-dir # Instead of composer-cache
      run: |
        echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Cache Composer
      uses: actions/cache@v2
      id: composer-cache
      with:
        path: ${{ steps.get-composer-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
    - name: Install composer dependencies
      if: steps.composer-cache.outputs.cache-hit != 'true'
      run: composer install --prefer-dist --no-progress --no-suggest

    # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
    # Docs: https://getcomposer.org/doc/articles/scripts.md

  style:
    runs-on: ubuntu-latest

    steps:
    - name: Load composer dependencies
      uses: actions/cache@v2
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        # no restore-keys here, so we only accept this exact version

    - id: files
      uses: jitterbit/get-changed-files@v1
    - run: |
        ./vendor/bin/phpcs --standard=./ruleset.xml --report=checkstyle --report-file=./checkstyle-be.xml ${{ steps.files.outputs.added }} ${{ steps.files.outputs.modified }}
      continue-on-error: true
    - run: |
        ./vendor/bin/phpstan analyse -c phpstan.neon --level 8 --no-interaction --no-progress --error-format=checkstyle ${{ steps.files.outputs.added }} ${{ steps.files.outputs.modified }} > phpstan.xml
      continue-on-error: true
    #- name: Check php coding style
    #  run: |
    #    FILES=$(git diff --name-only HEAD origin/master);
    #    if [ ! -z "$FILES" ]; then phpcs $FILES; fi
    #  run: composer run codestyle:ci
    #- run: ./vendor/bin/cs2pr ./build/checkstyle-be.xml
    #  if: always()

    #- run: echo "${PWD}/vendor/bin" >> $GITHUB_PATH

    #- name: Run linters
    #  uses: wearerequired/lint-action@v1
    #  with:
    #    github_token: ${{ secrets.GITHUB_TOKEN }}
    #    # Enable linters
    #    php_codesniffer: true
    #    # Optional: Ignore warnings
    #    php_codesniffer_args: "--standard=./ruleset.xml ./src"

    #- name: Lint Code Base
    #  uses: github/super-linter@v3
    #  env:
    #    VALIDATE_ALL_CODEBASE: false
    #    VALIDATE_PHP_PHPCS: true
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    #- name: Run test suite
    #  run: ./vendor/bin/phing unittest

    - name: Checkout Private GitHub Action Repo
      uses: actions/checkout@v2
      with:
        repository: kduret/custom-github-action
        path: my-action
        ref: master
        token: ${{ secrets.custom_github_action }} # stored in GitHub secrets
    - name: Run My Action
      uses: ./my-action
      with:
        who-to-greet: 'Kev'

    - name: Annotate pr from PHPCS
      run: |
        ./my-action/cs2pr.php --prefix=PHPCS: checkstyle-be.xml

    - name: Annotate pr from PHPSTAN
      if: always()
      run: |
        ./my-action/cs2pr.php --prefix=PHPSTAN: phpstan.xml
